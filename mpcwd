#! /usr/bin/env bash

# shellcheck disable=SC1090

########################################
#                                   _  # 
#  _ __ ___  _ __   _____      ____| | #
# | '_ ` _ \| '_ \ / __\ \ /\ / / _` | #
# | | | | | | |_) | (__ \ V  V / (_| | #
# |_| |_| |_| .__/ \___| \_/\_/ \__,_| #
#           |_|                        #
########################################

. "$HOME/.local/bin/mpcw"

declare -r MPCW_PID=$HOME/.config/mpcw/mpcw.pid
declare -r MPCW_WPID=$HOME/.config/mpcw/mpcw.wpid

handler() {
    while read -r; do	

	! __is_mpd_running && break

	media_update

	local current
	current="$(status)"

	if [[ "$(reads single)" == "on" ]]; then
	    mpc -q single off
	    writes single off
	elif ! [[ -a "$MPCW_LOCK" ]]; then
	    handle_playlist
	fi

	local nonstop
	nonstop="$(reads nonstop)"


	if [[ "$(pstatus)" != "stop" ]]; then
	    notify-send -u low "$current"
	    if ! [[ -a "$MPCW_LOCK" ]]; then
		local T
		T="$(date '+%M')"
		if [[ "$T" == "00" || "$T" == "15" || "$T" == "30" || "$T" == "45" ]]; then
		    __say time
		else
		    local n=$((RANDOM%10))
		    [[ $n == 5 ]] && __say &
		fi
	    fi
	elif [[ "$nonstop" == "off" ]]; then
	    notify-send -u low "$current"
	    [[ "$(mpc playlist | wc -l)" -eq 0 ]] && logme "[end] $(pstatus icon)"
	else
	    [[ "$(pstatus)" == "stop" ]] && logme "[end??] $(pstatus icon)"
	fi

    done < <(mpc idleloop player 2>/dev/null)
    logme "[main] quit!"
}

stalker() {
    local song
    local duration
    local elapsed
    
    logme "[daemon] started."
    __err -n "[>> mpcw daemon started."

    while :; do

	! __is_mpd_running && {
	    __err -u "[MPCWD] mpd is not running"
	    logme "[fatal] mpd is not running!"
	    logme "[fatal] pausing daemon!"
	    __err -n "[|| daemon is paused."
	    media_update
	    while ! __is_mpd_running; do
		if ! [[ -a "$MPCW_PID" ]]; then
		    logme "[daemon] stopped."
		    return 0
		fi
		sleep 5
	    done
	    handler &
	    disown
	    echo $! > "$MPCW_PID"
	    __err -n "[MPCWD] mpcw daemon restarted"
	    media_update
	    logme "[daemon] restarted."
	}

	if ! [[ -a "$MPCW_PID" ]]; then
	    logme "[daemon] stopped."
	    return 0
	fi
        if [[ "$(pstatus)" == "play" ]]; then
	    
	    song="$(getinfo file)"

	    duration="$(status duration)"
	    duration=${duration//.*}
	    ((duration-=1))
	    elapsed="$(status elapsed)"
	    elapsed=${elapsed//.*}

	    if [[ "$elapsed" == "$duration" && -n "$song" ]]; then
		! update_stats "$song" && logme "[warning] could not update stats for $song"
		mpc idle player >/dev/null
	    else
		sleep 0.125
	    fi
	else
	    __clean
	    mpc idle player >/dev/null
	fi
    done
}

startd() {
    [[ -a "$MPCW_PID" ]] && {
	local pid
        pid="$(cat "$MPCW_PID")"
	[[ "$(ps --no-headers --pid "$pid")" ]] && {
	    __err -n "[>> mpcw daemon is activated."
            return 1
	}
	pid="$(cat "$MPCW_WPID")"
	[[ "$(ps --no-headers --pid "$pid")" ]] && {
	    __err -n "[|| mpcw daemon is paused."
	    return 1
	}
    }

    rm "$MPCW_PID" 2>/dev/null
    rm "$MPCW_WPID" 2>/dev/null

    __clean
    echo > "$MPCW_LOG"
    logme "[log] starts now."

    handler &
    disown
    echo $! > "$MPCW_PID"

    stalker &
    disown
    echo $! > "$MPCW_WPID"

    [[ "$(pstatus)" != "stop" ]] && media_update

    logme "[$(pstatus)] $(pstatus icon)"

    return 0
}

stopd() {
    if [[ -a "$MPCW_PID" ]]; then
	local pid ppid sppid
	local wpid wppid
	musicnonstop off 2>/dev/null
	pid="$(cat "$MPCW_PID")"
	wpid="$(cat "$MPCW_WPID")"
	rm "$MPCW_PID"
	rm "$MPCW_WPID"
	[[ -n "$pid" ]]  &&  ppid="$(ps --no-headers --ppid "$pid"  | awk '{print $1}')"
	[[ -n "$ppid" ]] && sppid="$(ps --no-headers --ppid "$ppid" | awk '{print $1}')"
	[[ -n "$wpid" ]] && wppid="$(ps --no-headers --ppid "$wpid" | awk '{print $1}')"
	kill "$sppid" 2>/dev/null
	kill "$ppid" 2>/dev/null
	kill "$wppid" 2>/dev/null
	kill "$pid" 2>/dev/null
	sleep 1
	echo  > "$HOME/.config/currentmedia"
	__err -n "[|] mpcw daemon stopped."
	return 0
    fi
}

startd || stopd
