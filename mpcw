#! /usr/bin/env bash

###################################
# a wrapper+ for mpc              #
#  _ __ ___  _ __   _____      __ #
# | '_ ` _ \| '_ \ / __\ \ /\ / / #
# | | | | | | |_) | (__ \ V  V /  #
# |_| |_| |_| .__/ \___| \_/\_/   #
#           |_| version 0.3       #
###################################

# VARIABLES

declare -r MPCW_SETTINGS="$HOME/.config/mpcw/settings"
declare -r MPCW_HIST="$HOME/.config/mpcw/history"
declare -r MPCW_LOG="$HOME/.config/mpcw/log"
declare -r MPCW_SIMA="$HOME/.config/mpcw/artists"
declare -r STICKER_DB="$HOME/.config/mpd/sticker.sql"
declare -r MPCW_LOCK="$HOME/.config/mpcw/lock"

# ALIASES

alias add="mpc add"
alias new="mpc -q stop; mpc -q clear; mpc -q add"
alias list="mpc ls"
alias ins="mpc insert"
alias del="mpc -q del"
alias cr="crop"
alias sta="stop_after_current" # stop after current
alias sn="mpc -q single"
alias rn="mpc -q random; status random"
alias rp="mpc -q repeat; status repeat"
alias cs="mpc -q consume; status consume"
alias si="status"
alias rnd="getrnd"
alias nx="mpc -q next"
alias pv="mpc -q prev"
alias mns="musicnonstop"
alias mnsa="musicnonstop album"
alias mnss="musicnonstop song"
alias mnsi="musicnonstop sima"
alias mnso="musicnonstop off"
alias move="mpc -q move"
alias xf="mpc crossfade"
alias xfo="mpc crossfade 0"
alias rpg="mpc replaygain"
alias rpga="mpc replaygain album"
alias rpgt="mpc replaygain track"
alias rpgo="mpc replaygain auto"
alias p="toggle"
alias pl="play"
alias pla="play_album"
alias aa="add_album"
alias insa="ins_album"
alias nxa="next_album"
alias s="stop"
alias sk="skip"
alias usk="unskip"
alias skl="set_skip_limit"
alias ca="see_artist"
alias cl="see_album"
alias seek="mpc -q seek"
alias upd="((mpc -q update --wait && notify-send 'MPCW: Update finished') &)"
alias lh="clear; tail -f ${MPCW_HIST}"
alias llog="clear; tail -f ${MPCW_LOG}"

#

__is_mpd_running() {
    (>/dev/null pgrep "mpd$") && return 0 || return 1
}

__send_cmd() {
    local host
    local port
    host="${MPD_HOST:-"localhost"}"
    port="${MPD_PORT:-6600}"

nc "$host" "$port" <<CMD
command_list_begin
${@:-}
close
command_list_end
CMD
}

logme() {
    echo "$(now) --- $*" >> "$MPCW_LOG"
}

reads() {
    # read settings file.
    # create it with default values if it doesn't exist.
    if ! [[ -a "$MPCW_SETTINGS" ]]; then
	local settings
	settings="volume 100
dim off
nonstop off
filter off
station music non-stop radio
clean 1 month
skip 2
voice off
single off"
	mkdir "$HOME/.config/mpcw" 2>/dev/null
        echo "$settings" > "$MPCW_SETTINGS"
    fi
    local result
    [[ -z "$1" ]] && {
	echo "reads: options:"
	result="$(awk '{print "| " $1}' "$MPCW_SETTINGS")"
    } || result="$(sed -n "s/$1 //p" "$MPCW_SETTINGS")"
    [[ -z "$result" ]] && return 1
    echo "$result"
}

writes() {
    # write setting to file.
    [[ -n "$*" && -n "$2" ]] && {
	local opt="$1"
        shift
        local val="$*"
	sed -i "s/^$opt\s.*/$opt $val/" "$MPCW_SETTINGS"
    } || return 1
}

media_update() {
    local ntf_fmt='artist %artist%\ntitle %title%\nalbum %album%\ndate %date%'
    if ! __is_mpd_running; then
	echo > "$HOME/.config/currentmedia"
    else
        {
	    echo "status" "$(pstatus)"
            mpc current -f "$ntf_fmt"
        } > "$HOME/.config/currentmedia"
    fi
}

__say() {
    # say current artist and title.
    [[ $(reads voice) == "off" ]] && return
    [[ $(pstatus) != "play" ]] && return
    [[ "$(getinfo file)" = *[![:ascii:]]* ]] && return
    local duration
    duration="$(status duration)"
    duration="${duration//.*}"
    [[ $duration -lt 120 ]] && return
    local TMPWAV
    TMPWAV="$(mktemp)"
    local radio
    radio="$(reads station)"
    [[ -n "$radio" ]] && {
	type espeak >/dev/null && {
	    local artist
	    artist="$(getinfo artist)"
	    local title
	    title="$(getinfo title)"
	    local msg
	    if [[ "$1" == "time" ]]; then
		msg="... It is now: $(LC_TIME="C" date "+%l:%M %p")... On $radio."
	    else 
		msg="... You are listening to: $artist, $title... On $radio."
	    fi
	    local gender
	    local voice
	    ((gender=RANDOM%2))
	    [[ $gender = 0 ]] && gender="f" || gender="m"
	    voice="$gender$((RANDOM%3+2))"
	    espeak -v en+$voice -w "$TMPWAV" -s 140 2>/dev/null <<< "$msg"
	    if [[ "$title" == "$(getinfo title)" && $(pstatus) == "play" ]]; then
		local volume
		if [[ "$(reads dim)" == "on" ]]; then
		    volume=$(status volume)
		else
		    volume=$(reads volume)
		fi
		local new_vol=$((volume-volume*30/100))
		mpc -q volume  "$new_vol" 
		mpv --no-terminal --volume="$volume" "$TMPWAV"
		mpc -q volume "$volume"
		rm "$TMPWAV"
	    fi
	}
    }
}

__clean() {
    local freq
    freq="$(reads clean)"
    local date
    date=$(date -d "now -$freq" "+%Y-%m-%d")
    local TMPHIST
    TMPHIST="$(mktemp)"
    cp "$MPCW_HIST" "$MPCW_HIST.backup"
    awk '$1 > "'"$date"'"' "$MPCW_HIST" > "$TMPHIST"
    if [[ -n $(diff "$MPCW_HIST" "$TMPHIST") ]]; then
	 logme "[clean] => $date."
	 rm "$MPCW_HIST"
	 mv "$TMPHIST" "$MPCW_HIST"
    else
	rm "$TMPHIST"
    fi
}

set_clean_freq() {
    local error
    if [ "$*" ]; then
	local arg1
	local arg2
	if [[ "$1" =~ ^[0-9]+$ ]]; then
	    arg1="$1"
	    if [[ "$2" =~ ^day[s]\?$\|^week[s]\?$\|^month[s]\?$\|^year[s]\?$ ]]; then
		arg2="$2"
	    else
		error=1
	    fi
	else
	    error=1
	fi
    else
	error=1
    fi
    if [[ "$error" == 1 ]]; then
	__err -n "usage: set_clean_freq COUNT day(s) | week(s) | month(s) | year(s)"
	return 1
    else
	writes clean "$arg1" "$arg2"
	__clean
    fi
}

toggle() {
    pause
}

pause() {
    ! __is_mpd_running && return 1
    if [[ "$(pstatus)" == "play" ]]; then
	mpc -q pause
	logme "[pause] $(pstatus icon)"
    else
	# shellcheck disable=SC2119
        play
    fi
}

# shellcheck disable=SC2120
play() {
    ! __is_mpd_running && return 1
    echo > "$MPCW_LOCK"
    local volume
    local mode
    volume="$(reads volume)"
    mode="$(reads nonstop)"
    [[ "$(pstatus)" == "play" && -z "$*" ]] && return
    if [[ "$(pstatus)" == "stop" ]] && [[ $mode != "off" ]]; then
        if ! handle_playlist "$@"; then
            mpc -q --wait play "$@"
	    sleep 0.1
	    mpc -q volume "$volume"
	fi
    elif [[ $mode == "off" ]]; then
	mpc -q random off
	mpc -q crossfade 0
	mpc -q replaygain auto
	writes voice off
        mpc -q --wait play "$@"
	sleep 0.5
	mpc -q volume "$volume"
    else
        mpc -q --wait play "$@"
	sleep 0.1
	mpc -q volume "$volume"
    fi
    logme "[$(pstatus)] $(pstatus icon)"
    rm "$MPCW_LOCK" 2>/dev/null
}

play_album() {
    # play current song's album
    # if first track of the said album is playing, don't stop
    ! __is_mpd_running && return 1
    [[ -n "$*" ]] && {
	ins_album --now "${@}"
        return
    }
    if [[ $(pstatus) == "play" ]]; then
	local mode
	mode="$(reads nonstop)"
	[[ "$mode" == "song"  && "$(status random)" == "off" ]] && {
	    __err -l "[MPCW] already playing this album."
	    return 1
	}
        [[ "$mode" == "album" ]] && {
	    __err -l "[MPCW] already in album mode."
	    return 1
	}
        album="$(getinfo file)"
        album="${album%/*}"
	[[ "$(mpc ls "$album" | wc -l)" == 1 ]] && {
	    __err -l "[MPCW] it's the only song."
	    return
	}
        mpc -q random off
        mpc -q crossfade 0
	mpc -q replaygain album
        if [[ "$(getinfo track)" == 1 ]]; then
            mpc -q crop
            mpc add "$album"
            mpc -q del 2
        else
            mpc -q clear
	    mpc -q add "$album"
	    mpc -q play 1
        fi
	mpc -q replaygain album
	writes voice off
	__err -l "[MPCW] $(mpc current -f "%artist%: %album%")"
	logme "[play][album] $(pstatus icon)"
    else
        __err -l "[MPCW] not playing."
	return 1
    fi
}

add_album() {
    # add current song's album.
    ! __is_mpd_running && return 1
    if [[ $(pstatus) == "play" ]]; then
	local mode
	mode="$(reads nonstop)"
	[[ "$mode" == "song"  && "$(status random)" == "off" ]] && {
	    __err -l "[MPCW] already playing this album."
	    return 1
	}
        [[ "$mode" == "album" ]] && {
	    __err -l "[MPCW] already in album mode."
	    return 1
	}
	album="$(getinfo file)"
	album="${album%/*}"
	[[ "$(mpc ls "$album" | wc -l)" == 1 ]] && return
	mpc -q random off
	mpc -q crossfade 0
	mpc -q replaygain album
	mpc -q crop
	mpc -q add "$album"
	[[ "$(getinfo track)" == 1 ]] && mpc -q del 2
	writes voice off
	__err -l "[MPCW] $(mpc current -f "%artist%: %album%")"
	logme "[add][album] $(pstatus icon)"
    else
	__err -l "[MPCW] not playing"
	return 1
    fi
}

ins_album() {
    # add a given album after current song.
    ! __is_mpd_running && return 1
    [[ "$(pstatus)" == "stop" ]] && {
	__err -l "[MPCW] not playing."
        return 1
    }
    local play_now=0
    [[ "$1" == "--now" ]] && {
	play_now=1
        shift
    }
    [[ -z "$1" || -z "$2" ]] && {
	__err -l "[MPCW] argument missing."
        return 1
    }
    local result
    result="$(search_tag artist "$1" album "$2")"
    if [[ -n "$result" ]]; then
	mpc -q random off
	mpc -q crossfade 0
	mpc -q replaygain album
	mpc -q crop
	mpc -q add <<< "$result"
	[[ "$play_now" == 1 ]] && {
	    mpc -q play 2 && mpc del 1
	    logme "[play][album] $(pstatus icon)"
	} || logme "[ins][album] $(pstatus icon)"
	writes voice off
    else
	__err -l "[MPCW] nothing found."
	return 1
    fi
    return 0
}    

see_album() {
    # display current song's album.
    ! __is_mpd_running && return 1
    if [[ $(pstatus) != "stop" ]]; then
        album="$(getinfo file)"
	album="${album%/*}"
	mpc ls "$album" | less -F
   fi
}

see_artist() {
    # display current artist's albums.
    ! __is_mpd_running && return 1
    if [[ $(pstatus) != "stop" ]]; then
        artist="$(getinfo file)"
	artist="${artist%%/*}"
	mpc ls "$artist" | less -F
    fi
}

next_album() {
    ! __is_mpd_running && return 1
    if [[ $(pstatus) == "play" ]]; then
	if [[ $(reads nonstop) == "album" ]]; then
	    clr
	else
	    __err -n "[MPCW] not in album mode!"
	fi
    else
	__err -n "[MPCW] not playing."
    fi
}

__is_in_history() {
    local uri
    [[ "$1" == "--album" ]] && uri="$2" || uri="$1"
    local freq
    local D0 D1 D2
    freq="$(reads clean)"
    if [[ "$1" == "--album" ]]; then
	D0="$(__search_most_recently_played "$uri")"
    else
	D0="$(__search_by_uri "=\"$uri\"" "lastplayed")"
    fi
    [[ -z $D0 ]] && return 1
    D0="${D0%% *}"
    D1="$(date -d "$D0" "+%s")"
    D2="$(date -d "now -$freq" "+%s")"
    [[ $D1 -ge $D2 ]] && return 0 || return 1
}

__is_in_playlist() {
    local TMPCUR
    TMPCUR="$(mktemp)"
    mpc playlist -f "%file%" > "$TMPCUR"
    grep -Fq "$1" "$TMPCUR" 2>/dev/null
    local result=$?
    rm "$TMPCUR"
    return $result
}

search() {
    ! __is_mpd_running && return 1
    if [ "$*" ]; then
        command="mpc search"
        for ARG in "$@"; do
            command="$command any $ARG"
        done
	eval "$command"
    fi
}

search_tag() {
    ! __is_mpd_running && return 1
    if [ "$*" ]; then
        ! mpc search "$@" 2>/dev/null && error=1 || error=0
    else
	error=1
    fi
    [[ "$error" == 1 ]] &&
    (
	__err -n "[MPCW] [$*] did not return any result!"
	__err -n "usage: search_tag TAG VALUE ... TAG VALUE"
	return 1
    )
    return 0
}

find_tag() {
    ! __is_mpd_running && return 1
    local error
    if [ "$*" ]; then
	! mpc find "$@" 2>/dev/null && error=1 || error=0
    else
	error=1
    fi
    [[ "$error" -eq 1 ]] && {
	__err -n "[MPCW] [$*] did not return any result!"
	__err -n "usage: find_tag TAG VALUE ... TAG VALUE"
	return 1
    }
}
   
__search_uri() {

sqlite3 "$STICKER_DB" <<END_SQL
.timeout 2000
SELECT uri FROM sticker
WHERE name="$1" AND value$2
ORDER BY ${3:-Random()};
END_SQL
}

__search_by_uri() {

sqlite3 "$STICKER_DB" <<END_SQL
.timeout 2000
SELECT value FROM sticker
WHERE uri$1 AND name="$2"
ORDER BY uri;
END_SQL
}

__search_most_recently_played() {

sqlite3 "$STICKER_DB" <<SQL
.timeout 2000
SELECT MAX(value) FROM sticker
WHERE uri LIKE "$1%" AND name="lastplayed"
ORDER BY uri;
SQL
}

skipcount() {
    ! __is_mpd_running && return 1
    local skipcount
    skipcount=$(mpc sticker "$(getinfo file)" get "skipcount" 2>/dev/null)
    echo "${skipcount:-"skipcount=0"}"
}

playcount() {
    ! __is_mpd_running && return 1
    local playcount
    local song
    song="$(mpc current -f "%artist% - %title%" | tr '[:upper:]' '[:lower:]')"
    playcount="$(mpc sticker "$(getinfo file)" get "playcount" 2>/dev/null)"
    echo "${playcount:-playcount=0}"
}

lastplayed() {
    ! __is_mpd_running && return 1
    lastplayed=$(mpc sticker "$(getinfo file)" get "lastplayed" 2>/dev/null)
    [[ -n $lastplayed ]] && echo "$lastplayed"
}

skip() {
    ! __is_mpd_running && return 1
    local skipcount
    local song
    (($(skipcount)))
    ((skipcount+=1))
    song="$(getinfo file)"
    mpc sticker "$1" set "lastplayed" "$(now)" 2>/dev/null
    mpc sticker "$song" set "skipcount" "$skipcount" 2>/dev/null
    update_stats "$song"
    mpc -q next
}

unskip() {
    ! __is_mpd_running && return 1
    local song
    if [[ -z "$1" ]]; then
	song="$(getinfo file)"
    else
	song="$1"
    fi
    mpc sticker "$song" set "skipcount" 0 2>/dev/null
}

set_skip_limit() {
    ! __is_mpd_running && return 1
    if [[ $1 =~ ^[0-9]+$ ]]; then
	writes skip "$1"
    else
	__err -l "[MPCW] skip limit set to $(reads skip)"
    fi
}

stop() {
    ! __is_mpd_running && return 1
    echo > "$MPCW_LOCK"
    mpc -q stop
    rm "$MPCW_LOCK"
}

stop_after_current() {
    ! __is_mpd_running && return 1
    mpc -q single
    writes single "$(status single)"
    logme "[stop after current] $(reads single)"
    __err -l "[MPCW] stop after current $(reads single)"
}

vol() {
    ! __is_mpd_running && return 1
    if [ -z "$1" ]; then
	reads volume
    elif [[ "$(pstatus)" != "stop" ]]; then
	mpc -q volume "$1"
	writes volume "$(status volume)"
    elif [[ "$1" =~ ^[\+\|\-] ]]; then
	    local volume
	    volume="$(reads volume)"
	    ((volume+=$1))
	    [[ "$volume" -gt 100 ]] && volume=100
	    [[ "$volume" -lt 0 ]] && volume=0
	    writes volume "$volume"
    else
	writes volume "$1"
    fi
    __err -n "[MPCW] volume $(reads volume)%" 
}

dim() {
    # -6dB dimmer.
    ! __is_mpd_running && return 1
    local state
    state=$(pstatus)
    [[ $state == "stop" || $state == "pause" ]] &&
	{
	    __err -n "[MPCW] not playing"
    	    return
	}
    local current_volume
    local saved_volume
    current_volume="$(status volume)"
    saved_volume="$(reads volume)"
    if [[ $current_volume -lt $saved_volume ]]; then
	mpc -q volume "$saved_volume"
	__err -n "[MPCW] dim off."
	writes dim off
    elif [[ $current_volume -eq $saved_volume ]]; then
	((current_volume/=2))
	mpc -q volume $current_volume
	__err -n "[MPCW] dim on"
	writes dim on
   fi
}

getinfo() {
    ! __is_mpd_running && return 1
    if [ "$1" ]; then
	local info
	info=$(mpc current -f "%$1%")
	[[ "$info" == "%*" ]] && return 1
	echo "$info"
    else
	return 1
    fi
}

getnext() {
    ! __is_mpd_running && return 1
    local command
    command=$(mpc queued -f "%$1%")
    [[ $command == "%"* ]] || echo "$command"
}

__get_songs() {
    # __get_songs COUNT [RATING]
    ! __is_mpd_running && return 0

    local count=0
    local match=0
    local C value total
    declare -A songs
    declare -A artists
    local artist song
    local t_start
    
    t_start=$(date '+%s')
    C=$1
    value="$2"

    __filter

    # artists in the queue
    while read -r a; do
	a="${a/\ /""}"
	artists["$a"]=1
    done < <(__send_cmd playlistinfo | awk '$1=="Artist:" {$1=""; print tolower($0)}')


    if [[ -n $value ]]; then
	total="$(__search_uri "rating" "=$value" | wc -l)"
    elif [[ -z $MPCW_FILTER ]]; then
	total="$(mpc listall | wc -l)"
    fi
    [[ -n $MPCW_FILTER ]] &&
	total="$(search_tag "${MPCW_FILTER[@]}" | wc -l)"

    if [[ $total == 0 ]]; then
	return 0
    fi
    
    while [ $count -lt "$C" ] && [ "$total" -gt 0 ]; do

	while [ $match -eq 0 ]; do

	    ((t_end=$(date '+%s')-t_start))

	    if [[ $t_end -ge 10 ]]; then
		__err -n "[MPCW] operation takes too long."
		logme "[get] too long!"
		return $count
	    fi

	    if [[ -n $MPCW_FILTER ]]; then
		song="$(search_tag "${MPCW_FILTER[@]}" | shuf -n 1)"
	    elif [[ -n $value ]]; then
		song="$(__search_uri "rating" "=$value" | shuf -n 1)"
	    elif [[ -z $MPCW_FILTER ]]; then
		song="$(mpc listall | shuf | shuf -n 1)"
	    fi

	    artist="$(__send_cmd lsinfo "\"$song\"" | awk '$1=="Artist:" {$1=""; print tolower($0)}')"
	    artist="${artist/\ /""}"

	    [[ -n "${songs["$song"]}" ]] && continue
	    [[ -n "${artists["$artist"]}" ]] && continue

	    if ! __is_in_history "$song" && ! __is_in_playlist "$song"; then
		#if [[ -z $MPCW_FILTER ]] && [[ -z $value ]]; then
		if [[ "$(__search_by_uri "=\"$song\"" "skipcount")" -lt "$(reads skip)" ]]; then
		    match=1
		    artists["$artist"]=1
		    ((count++))
		fi
	    elif [[ -z "${songs["$song"]}" ]]; then
		songs["$song"]=1
		unset song
		((total--))
	    fi
	    if [[ "$total" == 0 ]]; then
		__err -u "[MPCW] all songs have been played within $(reads clean)(s)!"
		return $count
	    fi
	done
	match=0
	[[ -n "$song" ]] && echo "$song"
    done
    return $count
}

__get_one_album() {
    ! __is_mpd_running && return 1
    local artist
    local album
    local artist_count
    local album_count
    local prev_artist
    local match=0
    artist_count="$(mpc ls | wc -l)"
    album_count=

    __err -l "[MPCW] searching album."

    while [ "$match" -eq 0 ]; do
	if [[ -z "$*" ]]; then
	    [[ "$artist_count" == 0 ]] && {
		__err -u "[MPCW] all albums have been played within $(reads clean)(s)"
	        return 1
	    }
	    artist="$(mpc ls | shuf -n 1)"
	    [[ "$artist" == "$prev_artist" ]] && continue
	    album_count="$(mpc ls "$artist" | wc -l)"
	    while [ "$album_count" -gt 0 ]; do
		album="$(mpc ls "$artist" | shuf -n 1)"
		if ! __is_in_history --album "$album"; then
		    match=1
		    break
		else
		    unset album
		    ((album_count--))
		fi
	    done
	    if [[ "$album_count" == 0 ]]; then
		((artist_count--))
		prev_artist="$artist"
	    fi
	else
	    #FIXME: what if there's no album left to play?
	    album="$(search_tag "$@" | shuf -n 1)"
	    if [[ -z "$album" ]]; then
		__err -u "[MPCW] no album were found. [$*]"
		return 1
	    fi
	fi
    done
    echo "$album"
}

getrnd() {
    # get random songs / albums
    ! __is_mpd_running && return 1
    if [[ $1 =~ ^[0-9]+$ ]]; then
        local count=$1
	shift
        case "$1" in
            album)
		local album
		local i=0
                if [[ "$2" == "off" ]] || [[ -z "$2" ]]; then
		    while [ $i -lt "$count" ]; do
			__get_one_album || return 1
			((i++))
		    done
		else
		    shift
		    while [ $i -lt "$count" ]; do
			__get_one_album "$@" || return 1
			((i++))
		    done
		fi
	        ;;
	    song)
		if [[ "$(reads filter)" == "off" ]]; then
		    local C=$count
		    local T R5 R4 PR
		    #local t
		    #total songs
		    #T="$(__send_cmd stats | awk '$1=="songs:" {print $2}')"
		    #total rated songs
		    T="$(__search_uri "rating" "<>0" | wc -l)"
		    #((T-=t))
		    #loved songs
		    R5="$(__search_uri "rating" "=10" | wc -l)"
		    #liked songs
		    R4="$(__search_uri "rating" "=8" | wc -l)"
		    
		    if [[ $T -gt 0 ]]; then
			#% of loved songs
			((PR=C*R5/T))
			PR=${PR//.*}
			__get_songs $PR 10
			v=$?
			((count-=v))
			logme "[get] ***** $v"

			#% of liked songs
			((PR=C*R4/T))
			PR=${PR//.*}
			__get_songs $PR 8
			v=$?
			((count-=v))
			logme "[get] ****- $v"
		    fi
		    #other songs
		    logme "[get] ----? $count"
		    [[ $count -gt 0 ]] && __get_songs $count && return 1
		else
		    local C=$count
		    __get_songs $count
		    v=$?
		    ((count-=v))
		    logme "[get+] ----? $v"
		    if [[ $v -lt $C ]]; then
			__err -u "[MPCW] not enough songs: filter deactivated."
			musicnonstop song
		    fi
		    logme "[get] ----? $count"
		    __get_songs $count && return 1
		fi
		;;
	    *) __err -l "[MPCW] invalid argument. [$1]"
      esac
    else
	__err -n "usage: getrnd COUNT song | album"

    fi
}

__icchk() {
    # check if an internet connection is up and running.
    for interface in /sys/class/net/[\!lo]*; do
	if [[ "$(cat "$interface/carrier")" == 1 ]]; then
	    local iconn
	    iconn="$(nmcli -t -m multiline connection show --active 2>/dev/null)"
	    [[ -z $iconn ]] && return 1
	    return 0
	else
	    return 1
	fi
    done
}

__getsima() {
    #TODO: Save artists
    [[ -a "$MPCW_SIMA" ]] && rm "$MPCW_SIMA"
    wget -q \
	"http://ws.audioscrobbler.com/2.0/?method=artist.getsimilar&artist=$1&api_key=744b5c9d5eae3289a03548b59bfe137a&format=json" \
	--output-document="/tmp/artists.tmp"
    jq '.. | objects | .name // empty' "/tmp/artists.tmp" | sed 's/\"//g' > "$MPCW_SIMA"
    rm "/tmp/artists.tmp"
}

getsima() {
    # get songs for a list of similar artists.
    ! __is_mpd_running && return 1
    logme "[sima] $1."
    if ! __icchk; then
	__err -n "[MPCW] no internet connection!"
	__err -n "[MPCW] SIMA mode needs access to the internet..."
	logme "[sima] no internet!"
	return 1
    fi
    __getsima "$1"
    [[ -s  "$MPCW_SIMA" ]] && {
	local n=0
    	declare -a data
	while read -r line; do
	    data+=("$line")
	done < "$MPCW_SIMA"
	for artist in "${data[@]}"; do
	    while :; do
		song="$(find_tag artist "$artist" | shuf -n 1)"
		if [[ -n "$song" ]]; then
		    if ! __is_in_history "$song" &&
			! __is_in_playlist "$song"; then
			echo "$song"
			((n++))
			break
		    else
			break
		    fi
		else
		    break
		fi
	    done
        done
	unset data
	rm "$MPCW_SIMA"
	[[ $n -gt 0 ]] && {
	    logme "[sima] found $n songs."
            return
	}
    }
#    mpc listall | shuf -n 1
    logme "[sima] no song were found."
}

musicnonstop() {
    # enable non-stop mode 
    # ... if daemon is not running, cannot do that...
    if ! [[ -a "$HOME/.config/mpcw/mpcw.pid" ]]; then
	__err -n "[MPCW] daemon must be running to use this feature."
	return 1
    fi
    case "$1" in
	album) writes nonstop album; logme "[mode] $1";;
	song) writes nonstop song; logme "[mode] $1";;
	sima) writes nonstop sima; logme "[mode] $1";;
	off) writes nonstop off; logme "[mode] $1";;
	*) __err -l "[MPCW] mode: $(reads nonstop) | filter: $(reads filter)"; return 1
    esac
    shift
    if [ "$*" ]; then
	if [[ "$(reads nonstop)" == "sima" ]]; then
	    __err -n "[MPCW] no filter allowed in sima mode."
	    __err -n "[MPCW] filter set to <off>."
	    writes filter off
	else
	    #TODO: check user input (syntax: tag::value::tag::value)
	    writes filter "$*"
	    __filter
	    logme "[filter] ${MPCW_FILTER[*]}"
	fi
    else
	writes filter off
    fi
    __err -n "[MPCW] mode: $(reads nonstop) | filter: $(reads filter)"
}

pls() {
    ! __is_mpd_running && return 1
    local pos
    local fmt
    local cols
    cols=$(tput cols)
    local PLAYLIST
    PLAYLIST="$(mktemp)"
    pos="$(mpc current -f "%position%")"
    fmt="%artist% \ %title% \ %album%"
    mpc playlist -f "$fmt" | awk '{print NR "\\" $0}' | sed "s/^$pos\\\/[>\\\/" > "$PLAYLIST"

    column \
        -d -N "pos,artist,title,album" \
	-T "artist,title,album" \
	-c "$cols" \
	-t -s "\\" -o "| " "$PLAYLIST" | less -F
    rm "$PLAYLIST" 2>/dev/null
}

crop() {
    ! __is_mpd_running && return 1
    mpc -q crop
    logme "[playlist] cropped."
    if [[ "$(reads nonstop)" != "off" ]]; then
	handle_playlist
    fi
}

clr() {
    ! __is_mpd_running && return 1
    local mode
    mode="$(reads nonstop)"
    if [[ $mode != "off" && $(pstatus) != "stop" ]]; then
	mpc -q crop
	handle_playlist
	mpc -q del 1
    else
	mpc -q clear
    fi
    logme "[playlist] cleared."
}

hist() {
    tac "$MPCW_HIST" | less -F
}

__filter() {
    unset MPCW_FILTER
    local f
    f="$(reads filter)"
    [[ "$f" == "off" ]] && return
    local opt
    if [[ -n "$ZSH_NAME" ]]; then
	f="${f//'::'/\n}"
	#shellcheck disable=SC2116
	MPCW_FILTER=("${(@f)$(echo "$f")}")
    else
	IFS=$'\n' read -d "" -ra MPCW_FILTER <<< "${f//'::'/$'\n'}"
    fi
}

handle_playlist() {
    # handle playlist in non-stop mode
    ! __is_mpd_running && return 1
    local mode
    mode="$(reads nonstop)"
    [[ "$(mpc playlist | wc -l)" -gt 1 ]] && return 1
    if [[ "$mode" != "off" ]] && [[ -z "$(getnext file)" || "$(mpc playlist | wc -l)" == 0 ]]; then
	logme "[playlist] $0"
        case "$mode" in
            "album")
		local album
		album="$(getrnd 1 album )"
		if [[ -n "$album" ]]; then
		    mpc -q add "$album"
		    mpc replaygain album
		    mpc -q crossfade 0
		    mpc -q consume on
		    mpc -q random off
		    writes voice off
		    logme "$(pstatus icon) added new album."
		else
		    __err -u "[MPCW] no album found!"
		    return 1
		fi
		;;
	    "song")
		getrnd 10 song | mpc -q add 2>/dev/null
		#mpc -q ls mnsr/jingles | shuf -n 1 | mpc -q add 2>/dev/null
		mpc replaygain track;
		mpc -q crossfade 10
		mpc -q consume on
		mpc -q random on
		writes voice on
		logme "$(pstatus icon) added new songs."
		;;
	    "sima")
		# SIMilar Artist mode:
		# If playlist is empty, add a random song, play it and
		# add songs for similar artists.
		# if only one song left in the playlist, add a random track
		# then add similar artists for this particular track.
		[[ -z "$(pls)" ]] && {
		    getrnd 1 song | mpc -q add 2>/dev/null
		    mpc -q random off
		    mpc -q --wait play
		    sleep 0.1
		    mpc -q volume "$(reads volume)"
		    __err -l $'[MPCW]\n'"$(getinfo artist)"' radio.'
		    local added
		    added="$(getinfo artist): $(getinfo title)"
		    if [[ -z $ZSH_NAME ]]; then
			added="${added,,}"
		    else
			added="$(echo "$added" | awk '{print tolower($0)}')"
		    fi
		    logme "[sima]: added [$added]"
		    sleep 2
		    getsima "$(getinfo artist)" | mpc -q add 2>/dev/null
		}
		if [[ -z "$(getnext file)" ]]; then
		    if [[ -a "$MPCW_LOCK" ]]; then
			mpc -q --wait play
			sleep 0.1
			mpc -q volume "$(reads volume)"
			sleep 2
			getsima "$(getinfo artist)" | mpc -q add 2>/dev/null
			notify-send -u normal $'MPCW:\n'"$(getinfo artist)"' radio.'
		    else
			getrnd 1 song | mpc -q add 2>/dev/null
			logme "[sima]: added [$(getnext artist): $(getnext title)]"
			getsima "$(getnext artist)" | mpc -q add 2>/dev/null
			__err -l $'[MPCW] Coming next:\n'"$(getnext artist)"' radio.'
		    fi
		fi
		mpc replaygain track;
		mpc -q crossfade 10
		mpc -q consume on
		mpc -q random on
		writes voice on
		;;
	    *) __err -u "[MPCW] something's wrong. [$mode]"
        esac
        [[ "$(pstatus)" == "stop" ]] && {
	    echo > "$MPCW_LOCK"
	    local volume
	    volume="$(reads volume)"
            mpc -q --wait play "$@"
	    sleep 0.1
            mpc -q volume "$volume"
	    rm "$MPCW_LOCK"
        }
    else
        return 1
    fi
}

#shellcheck disable=SC2120
rating() {
    ! __is_mpd_running && return 1
    local rating
    local song
    rating=0
    (($(mpc sticker "$(getinfo file)" get rating 2>/dev/null)))
    song="$(mpc current -f "%artist%: %title%" | awk '{print tolower($0)}')"
    ((r=rating/2))
    if [[ "$1" == "n" ]]; then
	echo "rating=$r"
    elif [[ "$1" == "s" ]]; then
	case $r in
	    0) echo "-----";;
	    1) echo "*----";;
	    2) echo "**---";;
	    3) echo "***--";;
	    4) echo "****-";;
	    5) echo "*****"
	esac
    else
	__err -l "[MPCW] $song ($r)"
    fi
}

unrate() {
    ! __is_mpd_running && return 1
    local song
    song="$(mpc current -f "%artist%: %title%" | awk '{print tolower($0)}')"
    mpc sticker "$(getinfo file)" delete rating 2>/dev/null
    __err -n "[MPCW] unrated $song"
}

love() {
    ! __is_mpd_running && return 1
    (($(rating n)))
    local song
    song="$(mpc current -f "%artist%: %title%" | awk '{print tolower($0)}')"
    mpc sticker "$(getinfo file)" set rating 10
    __err -n "[MPCW] $song ($rating → 5)"
}

like() {
    ! __is_mpd_running && return 1
    (($(rating n)))
    local song
    song="$(mpc current -f "%artist%: %title%" | awk '{print tolower($0)}')"
    mpc sticker "$(getinfo file)" set rating 8
    __err -n "[MPCW] $song ($rating → 4)"
}

tsok() {
    ! __is_mpd_running && return 1
    (($(rating n)))
    local song
    song="$(mpc current -f "%artist%: %title%" | awk '{print tolower($0)}')"
    mpc sticker "$(getinfo file)" set rating 6
    __err -n "[MPCW] $song ($rating → 3)"
}

soso() {
    ! __is_mpd_running && return 1
    (($(rating n)))
    local song
    song="$(mpc current -f "%artist%: %title%" | awk '{print tolower($0)}')"
    mpc sticker "$(getinfo file)" set rating 4
    __err -n "[MPCW] $song ($rating → 2)"
}

nope() {
    ! __is_mpd_running && return 1
    (($(rating n)))
    local song
    song="$(mpc current -f "%artist%: %title%" | awk '{print tolower($0)}')"
    mpc sticker "$(getinfo file)" set rating 2
    __err -n "[MPCW] $song ($rating → 1)"
}

# shellcheck disable=SC2120
update_stats() {
    ! __is_mpd_running && return 1
    [[ -z "$1" ]] && {
	logme "[stat] nothing saved"
	return 1
    }
    local playcount
    mpc sticker "$1" set "lastplayed" "$(now)" 2>/dev/null
    (($(playcount)))
    ((playcount+=1))
    mpc sticker "$1" set "playcount" "$playcount" 2>/dev/null
    echo "$(now) --- $1" >> "$MPCW_HIST"
}

reset_stats() {
    ! __is_mpd_running && return 1
    [[ -z "$1" ]] && return
    mpc sticker "$1" delete "lastplayed" 2>/dev/null
    mpc sticker "$1" delete "playcount" 2>/dev/null
    mpc sticker "$1" delete "skipcount" 2>/dev/null
    echo "$1 stats resetted."
}

today() {
    date '+%Y-%m-%d'
}

now() {
    date '+%Y-%m-%d %H:%M:%S'
}

status() {
    ! __is_mpd_running && return 1
    if [[ -n "$1" ]]; then
	#local host
	#local port
	#host="${MPD_HOST:-"localhost"}"
	#port="${MPD_PORT:-"6600"}"
	#printf 'status\n;KO\n'  \
	#| nc "$host" "$port" \
	__send_cmd "status" | awk -v var="$1" '$1==var":" {if ($2==0) print "off"; else if ($2==1) print "on"; else print $2}'
    else
	local file ext
	file="$(getinfo file)"
	ext="${file##*.}"
	if [[ -z $ZSH_NAME ]]; then
	    ext="${ext,,}"
	else
	    ext="$(echo "$ext" | awk '{print tolower($0)}')"
	fi
	(($(playcount)))
	if [[ "$(pstatus)" != "stop" ]]; then
	    local D
	    D="$(getinfo date)"
	    echo "$(pstatus icon) $(rating s) x$playcount [$ext]"
	    echo "$(getinfo artist): $(getinfo title) [$(pstatus progress)]"
	    echo "$(getinfo album) | ${D:0:4}"
	else
	    pstatus icon
	fi
    fi
}

pstatus() {
    ! __is_mpd_running && return 1
    local state
    state=$(status state)
    [[ -z "$1" ]] && {
        echo "$state"
        return
    }
    if [[ "$1" == "icon" ]]; then
	local icon
        case "$state" in 
            "play") icon="";;
            "pause") icon="";;
	    "stop") icon=""
        esac
	local mode
	mode="$(reads nonstop)"
	local filter
	[[ "$(reads filter)" != "off" ]] && filter="+"
	case "$mode" in
	    "album") icon+=" [album$filter]";;
	    "song") icon+=" [song$filter]";;
	    "sima") icon+=" [sima]";;
	    "off") icon+=" [norm]"
	esac
	declare -A __m
	__m["repeat"]="r"
	__m["random"]="z"
        __m["single"]="s"
       	__m["consume"]="c"
	icon+=" "
	local modes=( "repeat" "random" "single" "consume" )
	for M in ${modes[*]}; do
	    [[ "$(status "$M")" == "on" ]] \
		&& icon+="${__m["$M"]}"    \
		|| icon+="-"
	done
	unset __m
	[[ -n "$(status xfade)" ]] && icon+="x" || icon+="-"
	echo "$icon"
    elif [[ "$1" == "progress" ]]; then
	local duration
	local elapsed
	local progress
	duration="$(status duration)"
	[[ -z $duration ]] && return 1
	duration="${duration//.*}"
	elapsed="$(status elapsed)"
	elapsed="${elapsed//.*}"
	((progress=elapsed*100/duration))
	echo "$progress%"
	return
    else
	__err -l "[MPCW] pstatus: unknown option [$*]"
    fi
}

set_radio_name() {
    if [[ -n "$*" ]]; then
	writes station "$*"
    else
	__err -l "usage: set_radio_name NAME"
    fi
}

__err() {
    local color off
    off="$(tput sgr0)"
    case "$1" in
	-l)
	    if [[ -t 1 ]]; then
		color="$(tput setaf 2)"
		( >&2 echo "${color}$2${off}" )
	    else
		notify-send -u low "$2"
	    fi
	    ;;
	-n)
	    if [[ -t 1 ]]; then
		color="$(tput setaf 3)"
		off="$(tput sgr0)"
		( >&2 echo "${color}$2${off}" )
	    else
		notify-send -t 2000 "$2"
	    fi
	    ;;
	-u)
	    if [[ -t 1 ]]; then
		color="$(tput setaf 1)"
		off="$(tput sgr0)"
		( >&2 echo "${color}$2${off}" )
	    else
		notify-send -u critical "$2"
	    fi
    esac
}

if [[ "$*" ]]; then
    if 	__is_mpd_running; then
	"${@:-}"
    else
	__err -u "[MPCW] mpd is not running!"
	exit 1
    fi
fi
